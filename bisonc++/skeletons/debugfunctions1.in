std::ostringstream \@Base::s_out__;
std::ostream &\@Base::dflush__(std::ostream &out)
{
    std::ostringstream &s_out__ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out__.str() << std::flush;
    s_out__.clear();
    s_out__.str("");
    return out;
}

std::string \@Base::stype__(char const *pre, 
                 STYPE__ const &semVal, char const *post) const
{
@insert-stype
    std::ostringstream ostr;
    std::ostr << pre << semVal << post;
    return ostr.str();
@else
    return "";
@end
}

inline size_t \@Base::state__() const
{
    return d_state;
}

inline size_t \@Base::vspIndex__() const
{
    return d_vsp -  &d_stateStack.front();
}

template<int field>
inline auto const &\@Base::stackEl__(size_t idx) const
{
    return std::get<field>(d_stateStack[idx]);
}

