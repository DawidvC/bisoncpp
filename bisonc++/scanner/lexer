%class-name = "Scanner" 
%lex-function-name = "yylex"
%debug

%x xstring pstring pxstring string comment quote block includeOnly

OCTAL   [0-7]
OCT3    {OCTAL}{3}
HEX     [[:xdigit:]]
HEX2    {HEX}{2}
ID1     [[:alpha:]_]
ID2     [[:alnum:]_]
IDENT   {ID1}{ID2}*

%%

<INITIAL,block>{

"{"          {
                    // open or count a nested a block 
                d_block.open(lineNr(), filename()); 
                begin(StartCondition__::block);
            }

    //  The whitespace-eating RegExes (REs) will normally simply consume the
    //  WS. However, if d_retWS is unequal 0 then WS is returned. This is
    //  sometimes needed (e.g., inside code blocks to be able to return the ws
    //  as part of the code-block). Comment is part of the WS returning REs
[ \t]+       {
                 if (d_block)
                     d_block += " ";
             }
             
[\n]+        {
                 if (d_block)
                     d_block += "\n";
             }

"//".*       // ignore eoln comment in source blocks

    // If comment is entered from `block' either a blank or a newline will be
    //  added to the block as soon as the matching end-comment is seen, and
    //  the scanner will return to its block-miniscanner state
"/*"         {
                 d_commentChar[0] = ' ';
                 begin(StartCondition__::comment);
             }
}

<INITIAL,includeOnly>"%include"[ \t]*   {
                                            begin(StartCondition__::pxstring);
                                            d_include = true;
                                        }

    //  Blocks start at { and end at their matching } char. They may contain
    //  comment and whitespace, but whitespace is reduced to single blanks or
    //  newlines. All STRING and QUOTE constants are kept as-is, and are
    //  registered as skip-ranges for $-checks
<block>{

"}"         {
                if (d_block.close())    // close a block
                {
                    begin(StartCondition__::INITIAL);
                    return Parser::BLOCK;
                }
            }

"\""        {
                begin(StartCondition__::string);
                d_block.beginSkip();
                more();
            }

"'"         {
                begin(StartCondition__::quote);
                d_block.beginSkip();
                more();
            }

.           d_block(d_matched.c_str());

}

"%baseclass-header"[ \t]*       {
                                    begin(StartCondition__::pxstring);
                                    return Parser::BASECLASS_HEADER;
                                }
"%baseclass-preinclude"[ \t]*   {
                                    begin(StartCondition__::pxstring);
                                    return Parser::BASECLASS_PREINCLUDE;
                                }
"%class-header"[ \t]*           {
                                    begin(StartCondition__::pxstring);
                                    return Parser::CLASS_HEADER;
                                }
"%class-name"                   return Parser::CLASS_NAME;
"%debug"                        return Parser::DEBUGFLAG;
"%error-verbose"                return Parser::ERROR_VERBOSE;
"%expect"                       return Parser::EXPECT;
"%filenames"[ \t]*              {
                                    begin(StartCondition__::pxstring);
                                    return Parser::FILENAMES;
                                }
"%implementation-header"[ \t]*  {
                                    begin(StartCondition__::pxstring);
                                    return Parser::IMPLEMENTATION_HEADER;
                                }
"%left"                         return Parser::LEFT;
"%lines"                        return Parser::LINES;
"%locationstruct"               return Parser::LOCATIONSTRUCT;
"%lsp-needed"                   return Parser::LSP_NEEDED;
"%ltype"[ \t]*                  {
                                    begin(StartCondition__::xstring);
                                    return Parser::LTYPE;
                                }
"%namespace"                    return Parser::NAMESPACE;
"%negative-dollar-indices"      return Parser::NEG_DOLLAR;
"%nonassoc"                     return Parser::NONASSOC;
"%parsefun-source"[ \t]*        {
                                    begin(StartCondition__::pxstring);
                                    return Parser::PARSEFUN_SOURCE;
                                }
"%prec"                         return Parser::PREC;
"%print"                        {
                                    begin(StartCondition__::pxstring);
                                    return Parser::PRINT;
                                }
"%right"                        return Parser::RIGHT;
"%required-tokens"              return Parser::REQUIRED;
"%scanner"[ \t]*                {
                                    begin(StartCondition__::pxstring);
                                    return Parser::SCANNER_INCLUDE;
                                }
"%scanner-token-function"[ \t]* {
                                    begin(StartCondition__::pxstring);
                                    return Parser::SCANNER_TOKEN_FUNCTION;
                                }
"%start"                        return Parser::START;
"%stype"                        {
                                    begin(StartCondition__::xstring);
                                    return Parser::STYPE;
                                }
"%token"                        return Parser::TOKEN;
"%type"                         return Parser::TYPE;
"%union"                        return Parser::UNION;
"%%"                            return Parser::TWO_PERCENTS;

"'"                             {
                                    begin(StartCondition__::quote);
                                    more();
                                }

"\""                            {
                                    begin(StartCondition__::string);
                                    more();
                                }

{IDENT}                         return Parser::IDENTIFIER;

[[:digit:]]+                    return setNumber();

.                               return d_matched[0];

    // pxstring selects either pstring, xstring or string
<pxstring>{
        
"\""    {
            more();
            begin(StartCondition__::string);
        }

"<"     {
            more();
            begin(StartCondition__::pstring);
        }

\n      {
            accept(0);
            begin(StartCondition__::INITIAL);
        }
            
.       {
            accept(0);
            begin(StartCondition__::xstring);
        }
}

    // string may be entered from block and pxstring
    // strings are all series (including escaped chars, like \") surrounded by
    // double quotes:
<string>{
        
"\""    {
            if (d_block.endSkip(d_matched.c_str()))
                begin(StartCondition__::block);
            else
            {
                begin(StartCondition__::INITIAL);

                d_ret = matchedCheck(3, Parser::STRING);
                if (d_ret)
                    return d_ret;

                pushSource();
            }
        }

"\\".   |              
.       |
\n      more();

}

<comment>{
.                  ;

\n                 d_commentChar[0] = '\n';
                   
"*/"               {
                       if (!d_block)
                           begin(StartCondition__::INITIAL);
                       else
                       {
                           d_block += d_commentChar;
                           begin(StartCondition__::block);
                       }
                   }
}

    /*
        when include is requested, pick all chars, but at %include
        switch file
    */
<includeOnly>.|\n             cout << d_matched << flush;

    /*
        a pstring is a string surrounded by < and >
    */

<pstring>{
        
">"     {
            begin(StartCondition__::INITIAL);

            d_ret = matchedCheck(3, Parser::PSTRING);
            if (d_ret)
                return d_ret;

            // pushSource(YY_CURRENT_BUFFER, YY_BUF_SIZE);
        }

"\\".   |              
.       |
\n      more();

}

    /*
        quote may be entered from INITIAL and block. 
        quoted constants start with a quote. They may be octal or hex numbers,
        escaped chars, or quoted constants 
    */
                            
<quote>{

"\\"{OCT3}"'"        {
                         if (d_block.skip(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else
                         {
                             begin(StartCondition__::INITIAL);
                             octal();        // quoted octal constant
                             return Parser::QUOTE;
                         }
                     }
                     
"\\x"{HEX2}"'"       {
                         if (d_block.skip(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else
                         {
                             begin(StartCondition__::INITIAL);
                             hexadecimal(); // quoted hex constant
                             return Parser::QUOTE;
                         }
                     }
                     
"\\"[abfnrtv]"'"     {
                         if (d_block(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else
                         {
                             begin(StartCondition__::INITIAL);
                             escape();       // quoted escape char
                             return Parser::QUOTE;
                         }
                     }    
"\\"."'"             {
                         // other quoted escaped char
                         if (d_block.skip(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else           
                         {
                             begin(StartCondition__::INITIAL);
                             d_number = d_matched[2];
                             return Parser::QUOTE;
                         }
                     }
."'"                 {
                         if (d_block.skip(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else
                         {
                                              // simple quoted constant
                             begin(StartCondition__::INITIAL);
                             d_number = d_matched[1];
                             return Parser::QUOTE;
                         }
                     }
[^']+"'"             {
                         if (d_block.skip(d_matched.c_str()))
                             begin(StartCondition__::block);
                         else
                         {
                             lineMsg(emsg) << "multiple characters in "
                                         "quoted constant " << 
                                         d_matched << endl;
                             d_number = 0;
                             begin(StartCondition__::INITIAL);
                             return Parser::QUOTE;
                         }
                     }
}

    /* 
        xstring returns the next string delimited by either blanks, tabs,
        newlines or C/C++ comment. Strings delimited by "..." are returned as
        STRING, strings delimited by <...> as PSTRING. If d_include was set
        before entering this mini scanner a file-switch is
        realized. Otherwise, the string is returned as a Parser::XSTRING
    */
<xstring>{
        
"\\".         more();

"//"          |
"/*"          {
                  accept(length() - 2);

                  begin(d_includeOnly ? StartCondition__::includeOnly : 
                                        StartCondition__::INITIAL);

                  d_ret = matchedCheck(1, Parser::XSTRING);
                  accept(d_nKept);

                  if (d_ret)
                      return d_ret;
                
                  pushSource();
              }
            
[ \t]*$       {
                  begin(d_includeOnly ? StartCondition__::includeOnly : 
                                        StartCondition__::INITIAL);
              
                  d_ret = matchedCheck(1, Parser::XSTRING);
                  accept(d_nKept);
                  if (d_ret)
                      return d_ret;

                  pushSource();
              }

.           more();

}
