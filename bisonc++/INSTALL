To Install bisonc++ by hand instead of using the binary distribution perform
the following steps:

    0. Bisonc++ and its construction depends, in addition to the normally
        standard available system software on specific software and versions 
        which is documented in the file `required'.

       (If you compile the bobcat library yourself, note that bisonc++ does
        not use the SSL, Milter and Xpointer classes; they may --as far as
        bisonc++ is concerned-- be left out of the library)

    1. It is expected you use icmake for the package construction. For this a
        top-level script (build) and support scripts in the ./icmake/
        directory are available. By default, the 'build' script echoes the
        commands it executes to the standard output stream. By specifying the
        option -q (e.g., ./build -q ...) this is prevented, significantly
        reducing the output generated by 'build'.
       Icmake is available on a great many architectures. See also the file
        INSTALL.im for additional details.

    2. Inspect the values of the variables in the file INSTALL.im Modify these
       when necessary. The default skeleton filenames are compiled into
       bisonc++ through the definitions in options/data.cc.

    3. Run 
            ./build program [strip]
       to compile bisonc++. The argument `strip' is optional and strips
       symbolic information from the final executable.

    4. If you installed Yodl then you can create the documentation:
            ./build man 
        builds the man-pages, and
            ./build manual
        builds the manual.

    5.  Before installing the components of Bisonc++, consider defining the
        environment variable BISONCPP, defining its value as the (preferably
        absolute) filename of a file on which installed files and directories
        are logged.
        Defining the BISONCPP environment variable as ~/.bisoncpp usually
        works well. 

    6. Installation of the software in the default locations (i.e,, without
        specifying a 'base' location, see the command below) probably requires
        root permissions.

        To install the software run:

            ./build install [base]

        This installs bisonc++, its skeleton files, man page, manual, standard
        documentation, and extra documentation below 'base' in the locations
        defined in INSTALL.im. If you don't want to install a particular
        component remove the corresponding #define from INSTALL.im. By
        default 'base' is an empty string.

    7. Following the installation nothing in the directory tree which contains
        this file (i.e., INSTALL) is required for the proper functioning of
        bisonc++, so consider removing it. If you only want to remove
        left-over files from the build-process, just run

            ./build distclean

    8.  Uninstalling previously installed components of Bisonc++ (using
        ./build install ...) is easy if the environment variable BISONCPP was
        defined when issuing the `./build install ...' command. In that case,
        run the command

            ./build uninstall

        This command only works if the environment variable BISONCPP has the
        same value as was used with the `./build install' commands, and the
        file to which it refers still exists. In that case `./build uninstall'
        removes all installed files (unless they were modified) and removes
        all empty directories created by the `./build install ...'  command.
        Defining the BISONCPP environment variable as ~/.bisoncpp usually
        works well.

-----------------------------------------------------------------------------
NOTE: the parser-class header file generated by bisonc++ before version
     4.02.00 should have the prototypes of some of their private members
     modified.

    Simply replacing the `support functions for parse()' section shown at the
     end of the header file by the following lines should make your header
     file up-to-date again. Bisonc++ will not by itself rewrite the
     parser class headers to prevent undoing any modifications you may have
     implemented in parser-class header files:

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);

     The function print__) is defined by bisonc++, the default implementation
     of exceptionHandler__() can be added to the parser's internal header
     file:

inline void Parser::exceptionHandler__(std::exception const &exc)         
{
    throw;              // optionally re-implement to handle exceptions thrown
                        // by actions 
}
