#include "generator.h"

#include <sstream>
#include <iomanip>
#include <fstream>

#include <bobcat/exception>
#include <bobcat/datetime>
#include <bobcat/mstream>
#include <bobcat/pattern>

#include "../options/options.h"
#include "../rules/rules.h"
#include "../terminal/terminal.h"
#include "../production/production.h"

namespace Global
{
    void plainWarnings();
}

extern char version[];

using namespace std;
using namespace FBB;

template <typename Param>
struct Generator::At
{
    char const *key;
    size_t size;
    void (Generator::*function)(Param &param);

    At(char const *keyArg = "", void (Generator::*fun)(Param &) = 0)
    :
        key(keyArg),
        function(fun)
    {}
};

template <>
struct Generator::At<void>
{
    char const *key;
    size_t size;
    void (Generator::*function)();

    At(char const *keyArg = "", void (Generator::*fun)() = 0)
    :
        key(keyArg),
        size(sizeof(keyArg) - 1),
        function(fun)
    {}
};

template <typename ReturnType> 
vector<Generator::At<ReturnType>>::const_iterator Generator::find(
    string const &line, 
    size_t pos, 
    vector<At<ReturnType>> const &atVector
)
{
    for (auto &at: atVector)
    {
        if (line.find(at.key, pos) == pos)
            return at;
    }
    return atVector::end();
}

                            







