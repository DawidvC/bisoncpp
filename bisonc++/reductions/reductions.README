The Reductions class collects the reduction-transitions (RTs) used in a
state. It is used in State::writeStateArray.

All RTs are collected in the d_transitions data structure (a vector of a
vector of pointers to Symbols and the number of the production rule to reduce
to), counting all tokens that were used for the RTs. 

When a _default_ transition is entered, its index in the d_transitions vector
is stored in d_defaultReduction, and its token-value is not entered into the
token vector associated with the transition. Instead, its d_default_ member is
set to true.

The d_transitions data structure has the following fields:

        vector<Symbol const *> - (base class) the tokens used for this
                                 transition 
        int d_nr - the number of the production rule used in this transition
        bool d_default_         - this one is used for the _default_ token

Once all RTs have been collected, the following transformations may be
performed: 

    1. If a default transition has been set, but the number of explicit
RTs is equal to the number of terminal tokens used in the grammar, the default
transtition can never occur, and it is removed from d_transitions. 

    2. If 1 occurs, or no _default_ transition was used for this state the
transition having the most number of elements is found. This transition
becomes the default transition. This is possible, since we know that no other
transitions are possible, since all tokens that can be produced by the lexical
scanner were mentioned explicitly in this grammar, or (and this is according
to the previous implementation used in bisonc++) in this state no other
reductions are used, so the `most popular' one may become the default
transition. 


    When all reductions have been determined, all non-default reductions can
be obtained using the begin() and end() members: they return iterators to
pairs containing a token (first) and production rule (second) to reduce to
when the lexical scanner returns the token. For this, the nested class 
`iterator' is defined.
