// Generated by Bisonc++ V3.01.00 on Sat, 24 Mar 2012 15:43:50 +0100

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {296, 4}, // 1: input ->  directives _two_percents rules optTwo_percents
     {298, 1}, // 2: _two_percents (TWO_PERCENTS) ->  TWO_PERCENTS
     {301, 1}, // 3: identifier (IDENTIFIER) ->  IDENTIFIER
     {302, 3}, // 4: typename ('<') ->  '<' identifier '>'
     {303, 1}, // 5: optComma (',') ->  ','
     {303, 0}, // 6: optComma ->  <empty>
     {304, 1}, // 7: optNumber (NUMBER) ->  NUMBER
     {304, 0}, // 8: optNumber ->  <empty>
     {305, 1}, // 9: optSemiCol (';') ->  ';'
     {305, 0}, // 10: optSemiCol ->  <empty>
     {306, 0}, // 11: _tokenname ->  <empty>
     {307, 2}, // 12: optTypename ->  typename _tokenname
     {307, 1}, // 13: optTypename ->  _tokenname
     {300, 1}, // 14: optTwo_percents (TWO_PERCENTS) ->  TWO_PERCENTS
     {300, 0}, // 15: optTwo_percents ->  <empty>
     {308, 1}, // 16: _baseclass_header (BASECLASS_HEADER) ->  BASECLASS_HEADER
     {309, 1}, // 17: _baseclass_preinclude (BASECLASS_PREINCLUDE) ->  BASECLASS_PREINCLUDE
     {310, 1}, // 18: _class_header (CLASS_HEADER) ->  CLASS_HEADER
     {311, 1}, // 19: _class_name (CLASS_NAME) ->  CLASS_NAME
     {312, 1}, // 20: _expect (EXPECT) ->  EXPECT
     {313, 1}, // 21: _filenames (FILENAMES) ->  FILENAMES
     {314, 1}, // 22: _implementation_header (IMPLEMENTATION_HEADER) ->  IMPLEMENTATION_HEADER
     {315, 0}, // 23: _incrementPrecedence ->  <empty>
     {316, 2}, // 24: _left (LEFT) ->  LEFT _typesymbol
     {318, 1}, // 25: _locationstruct (LOCATIONSTRUCT) ->  LOCATIONSTRUCT
     {319, 1}, // 26: _ltype (LTYPE) ->  LTYPE
     {320, 1}, // 27: _namespace (NAMESPACE) ->  NAMESPACE
     {321, 2}, // 28: _nonassoc (NONASSOC) ->  NONASSOC _typesymbol
     {322, 1}, // 29: _parsefun_source (PARSEFUN_SOURCE) ->  PARSEFUN_SOURCE
     {323, 0}, // 30: _pushPrecedence ->  <empty>
     {324, 1}, // 31: _required (REQUIRED) ->  REQUIRED
     {325, 2}, // 32: _right (RIGHT) ->  RIGHT _typesymbol
     {326, 1}, // 33: _scanner (SCANNER) ->  SCANNER
     {327, 1}, // 34: _scanner_token_function (SCANNER_TOKEN_FUNCTION) ->  SCANNER_TOKEN_FUNCTION
     {328, 1}, // 35: _scanner_matched_text_function (SCANNER_MATCHED_TEXT_FUNCTION) ->  SCANNER_MATCHED_TEXT_FUNCTION
     {329, 1}, // 36: _start (START) ->  START
     {330, 0}, // 37: _symbol_exp ->  <empty>
     {331, 1}, // 38: _symbol (QUOTE) ->  QUOTE
     {331, 2}, // 39: _symbol ->  identifier optNumber
     {332, 3}, // 40: _symbolList ->  _symbolList optComma _symbol
     {332, 1}, // 41: _symbolList ->  _symbol
     {333, 3}, // 42: _symbols ->  _symbol_exp _symbolList optSemiCol
     {334, 1}, // 43: _target_directory (TARGET_DIRECTORY) ->  TARGET_DIRECTORY
     {335, 1}, // 44: _type (TYPE) ->  TYPE
     {336, 1}, // 45: _stype (STYPE) ->  STYPE
     {317, 0}, // 46: _typesymbol ->  <empty>
     {337, 2}, // 47: _token (TOKEN) ->  TOKEN _typesymbol
     {338, 1}, // 48: _union (UNION) ->  UNION
     {339, 1}, // 49: _polymorphic (POLYMORPHIC) ->  POLYMORPHIC
     {340, 1}, // 50: _typespec (':') ->  ':'
     {341, 3}, // 51: _polyspec (STRING) ->  identifier _typespec STRING
     {342, 3}, // 52: _polyspecs (';') ->  _polyspecs ';' _polyspec
     {342, 1}, // 53: _polyspecs ->  _polyspec
     {343, 2}, // 54: _directiveSpec (STRING) ->  _baseclass_header STRING
     {343, 2}, // 55: _directiveSpec (STRING) ->  _baseclass_preinclude STRING
     {343, 2}, // 56: _directiveSpec (STRING) ->  _class_header STRING
     {343, 2}, // 57: _directiveSpec (IDENTIFIER) ->  _class_name IDENTIFIER
     {343, 1}, // 58: _directiveSpec (DEBUGFLAG) ->  DEBUGFLAG
     {343, 1}, // 59: _directiveSpec (ERROR_VERBOSE) ->  ERROR_VERBOSE
     {343, 2}, // 60: _directiveSpec (NUMBER) ->  _expect NUMBER
     {343, 2}, // 61: _directiveSpec (STRING) ->  _filenames STRING
     {343, 1}, // 62: _directiveSpec (FLEX) ->  FLEX
     {343, 2}, // 63: _directiveSpec (STRING) ->  _implementation_header STRING
     {343, 4}, // 64: _directiveSpec ->  _left _incrementPrecedence optTypename _symbols
     {343, 3}, // 65: _directiveSpec (BLOCK) ->  _locationstruct BLOCK optSemiCol
     {343, 1}, // 66: _directiveSpec (LSP_NEEDED) ->  LSP_NEEDED
     {343, 2}, // 67: _directiveSpec (STRING) ->  _ltype STRING
     {343, 2}, // 68: _directiveSpec (IDENTIFIER) ->  _namespace IDENTIFIER
     {343, 1}, // 69: _directiveSpec (NEG_DOLLAR) ->  NEG_DOLLAR
     {343, 1}, // 70: _directiveSpec (NOLINES) ->  NOLINES
     {343, 4}, // 71: _directiveSpec ->  _nonassoc _incrementPrecedence optTypename _symbols
     {343, 2}, // 72: _directiveSpec (STRING) ->  _parsefun_source STRING
     {343, 1}, // 73: _directiveSpec (PRINT_TOKENS) ->  PRINT_TOKENS
     {343, 2}, // 74: _directiveSpec (NUMBER) ->  _required NUMBER
     {343, 4}, // 75: _directiveSpec ->  _right _incrementPrecedence optTypename _symbols
     {343, 2}, // 76: _directiveSpec (STRING) ->  _scanner STRING
     {343, 2}, // 77: _directiveSpec (STRING) ->  _scanner_token_function STRING
     {343, 2}, // 78: _directiveSpec (STRING) ->  _scanner_matched_text_function STRING
     {343, 2}, // 79: _directiveSpec (IDENTIFIER) ->  _start IDENTIFIER
     {343, 2}, // 80: _directiveSpec (STRING) ->  _stype STRING
     {343, 2}, // 81: _directiveSpec (STRING) ->  _target_directory STRING
     {343, 4}, // 82: _directiveSpec ->  _token optTypename _pushPrecedence _symbols
     {343, 3}, // 83: _directiveSpec ->  _type typename _symbols
     {343, 3}, // 84: _directiveSpec (BLOCK) ->  _union BLOCK optSemiCol
     {343, 2}, // 85: _directiveSpec ->  _polymorphic _polyspecs
     {343, 1}, // 86: _directiveSpec (_error_) ->  _error_
     {344, 1}, // 87: _directive ->  _directiveSpec
     {297, 2}, // 88: directives ->  directives _directive
     {297, 0}, // 89: directives ->  <empty>
     {345, 1}, // 90: _precSpec (IDENTIFIER) ->  IDENTIFIER
     {345, 1}, // 91: _precSpec (QUOTE) ->  QUOTE
     {346, 1}, // 92: _productionElement (QUOTE) ->  QUOTE
     {346, 1}, // 93: _productionElement (IDENTIFIER) ->  IDENTIFIER
     {346, 1}, // 94: _productionElement (BLOCK) ->  BLOCK
     {346, 2}, // 95: _productionElement (PREC) ->  PREC _precSpec
     {347, 2}, // 96: _productionElements ->  _productionElements _productionElement
     {347, 1}, // 97: _productionElements ->  _productionElement
     {348, 1}, // 98: _production ->  _productionElements
     {348, 0}, // 99: _production ->  <empty>
     {349, 1}, // 100: _productionSeparator ('|') ->  '|'
     {350, 3}, // 101: _productionList ->  _productionList _productionSeparator _production
     {350, 1}, // 102: _productionList ->  _production
     {351, 2}, // 103: _ruleName (':') ->  identifier ':'
     {352, 3}, // 104: _rule (';') ->  _ruleName _productionList ';'
     {299, 2}, // 105: rules ->  rules _rule
     {299, 0}, // 106: rules ->  <empty>
     {353, 1}, // 107: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {   3} },              
    { {     296}, {   1} }, // input     
    { {     297}, {   2} }, // directives
    { {       0}, { -89} },              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { ERR_REQ}, { 63} },                                  
    { {     298}, {  3} }, // _two_percents                 
    { {     344}, {  4} }, // _directive                    
    { {     293}, {  5} }, // TWO_PERCENTS                  
    { {     343}, {  6} }, // _directiveSpec                
    { {     308}, {  7} }, // _baseclass_header             
    { {     309}, {  8} }, // _baseclass_preinclude         
    { {     310}, {  9} }, // _class_header                 
    { {     311}, { 10} }, // _class_name                   
    { {     262}, { 11} }, // DEBUGFLAG                     
    { {     263}, { 12} }, // ERROR_VERBOSE                 
    { {     312}, { 13} }, // _expect                       
    { {     313}, { 14} }, // _filenames                    
    { {     266}, { 15} }, // FLEX                          
    { {     314}, { 16} }, // _implementation_header        
    { {     316}, { 17} }, // _left                         
    { {     318}, { 18} }, // _locationstruct               
    { {     271}, { 19} }, // LSP_NEEDED                    
    { {     319}, { 20} }, // _ltype                        
    { {     320}, { 21} }, // _namespace                    
    { {     274}, { 22} }, // NEG_DOLLAR                    
    { {     275}, { 23} }, // NOLINES                       
    { {     321}, { 24} }, // _nonassoc                     
    { {     322}, { 25} }, // _parsefun_source              
    { {     281}, { 26} }, // PRINT_TOKENS                  
    { {     324}, { 27} }, // _required                     
    { {     325}, { 28} }, // _right                        
    { {     326}, { 29} }, // _scanner                      
    { {     327}, { 30} }, // _scanner_token_function       
    { {     328}, { 31} }, // _scanner_matched_text_function
    { {     329}, { 32} }, // _start                        
    { {     336}, { 33} }, // _stype                        
    { {     334}, { 34} }, // _target_directory             
    { {     337}, { 35} }, // _token                        
    { {     335}, { 36} }, // _type                         
    { {     338}, { 37} }, // _union                        
    { {     339}, { 38} }, // _polymorphic                  
    { { _error_}, { 39} }, // _error_                       
    { {     257}, { 40} }, // BASECLASS_HEADER              
    { {     258}, { 41} }, // BASECLASS_PREINCLUDE          
    { {     260}, { 42} }, // CLASS_HEADER                  
    { {     261}, { 43} }, // CLASS_NAME                    
    { {     264}, { 44} }, // EXPECT                        
    { {     265}, { 45} }, // FILENAMES                     
    { {     268}, { 46} }, // IMPLEMENTATION_HEADER         
    { {     269}, { 47} }, // LEFT                          
    { {     270}, { 48} }, // LOCATIONSTRUCT                
    { {     272}, { 49} }, // LTYPE                         
    { {     273}, { 50} }, // NAMESPACE                     
    { {     276}, { 51} }, // NONASSOC                      
    { {     278}, { 52} }, // PARSEFUN_SOURCE               
    { {     283}, { 53} }, // REQUIRED                      
    { {     284}, { 54} }, // RIGHT                         
    { {     285}, { 55} }, // SCANNER                       
    { {     287}, { 56} }, // SCANNER_TOKEN_FUNCTION        
    { {     286}, { 57} }, // SCANNER_MATCHED_TEXT_FUNCTION 
    { {     288}, { 58} }, // START                         
    { {     290}, { 59} }, // STYPE                         
    { {     291}, { 60} }, // TARGET_DIRECTORY              
    { {     292}, { 61} }, // TOKEN                         
    { {     294}, { 62} }, // TYPE                          
    { {     295}, { 63} }, // UNION                         
    { {     279}, { 64} }, // POLYMORPHIC                   
    { {       0}, {  0} },                                  
};

SR__ s_3[] =
{
    { { DEF_RED}, {    2} },         
    { {     299}, {   65} }, // rules
    { {       0}, { -106} },         
};

SR__ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 66} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 67} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 68} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       267}, { 69} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       277}, { 70} }, // NUMBER
    { {         0}, {  0} },          
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 71} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 72} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_17[] =
{
    { { DEF_RED}, {   2} },                        
    { {     315}, {  73} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       259}, { 74} }, // BLOCK
    { {         0}, {  0} },         
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 75} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       267}, { 76} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   2} },                        
    { {     315}, {  77} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 78} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       277}, { 79} }, // NUMBER
    { {         0}, {  0} },          
};

SR__ s_28[] =
{
    { { DEF_RED}, {   2} },                        
    { {     315}, {  80} }, // _incrementPrecedence
    { {       0}, { -23} },                        
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 81} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 82} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 83} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       267}, { 84} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 85} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       289}, { 86} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_35[] =
{
    { { REQ_DEF}, {   5} },               
    { {     307}, {  87} }, // optTypename
    { {     302}, {  88} }, // typename   
    { {     306}, {  89} }, // _tokenname 
    { {      60}, {  90} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       302}, { 91} }, // typename
    { {        60}, { 90} }, // '<'     
    { {         0}, {  0} },            
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       259}, { 92} }, // BLOCK
    { {         0}, {  0} },         
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       342}, { 93} }, // _polyspecs
    { {       341}, { 94} }, // _polyspec 
    { {       301}, { 95} }, // identifier
    { {       267}, { 96} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_47[] =
{
    { { DEF_RED}, {   2} },               
    { {     317}, {  97} }, // _typesymbol
    { {       0}, { -46} },               
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   2} },               
    { {     317}, {  98} }, // _typesymbol
    { {       0}, { -46} },               
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   2} },               
    { {     317}, {  99} }, // _typesymbol
    { {       0}, { -46} },               
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   2} },               
    { {     317}, { 100} }, // _typesymbol
    { {       0}, { -46} },               
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   7} },                   
    { {     300}, { 101} }, // optTwo_percents
    { {     352}, { 102} }, // _rule          
    { {     293}, { 103} }, // TWO_PERCENTS   
    { {     351}, { 104} }, // _ruleName      
    { {     301}, { 105} }, // identifier     
    { {     267}, {  96} }, // IDENTIFIER     
    { {       0}, { -15} },                   
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   5} },               
    { {     307}, { 106} }, // optTypename
    { {     302}, {  88} }, // typename   
    { {     306}, {  89} }, // _tokenname 
    { {      60}, {  90} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   3} },              
    { {     305}, { 107} }, // optSemiCol
    { {      59}, { 108} }, // ';'       
    { {       0}, { -10} },              
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   5} },               
    { {     307}, { 109} }, // optTypename
    { {     302}, {  88} }, // typename   
    { {     306}, {  89} }, // _tokenname 
    { {      60}, {  90} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   5} },               
    { {     307}, { 110} }, // optTypename
    { {     302}, {  88} }, // typename   
    { {     306}, {  89} }, // _tokenname 
    { {      60}, {  90} }, // '<'        
    { {       0}, { -11} },               
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {   2} },                   
    { {     323}, { 111} }, // _pushPrecedence
    { {       0}, { -30} },                   
};

SR__ s_88[] =
{
    { { DEF_RED}, {   2} },              
    { {     306}, { 112} }, // _tokenname
    { {       0}, { -11} },              
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       301}, { 113} }, // identifier
    { {       267}, {  96} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_91[] =
{
    { { DEF_RED}, {   3} },               
    { {     333}, { 114} }, // _symbols   
    { {     330}, { 115} }, // _symbol_exp
    { {       0}, { -37} },               
};

SR__ s_92[] =
{
    { { REQ_DEF}, {   3} },              
    { {     305}, { 116} }, // optSemiCol
    { {      59}, { 108} }, // ';'       
    { {       0}, { -10} },              
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   2} },       
    { {      59}, { 117} }, // ';'
    { {       0}, { -85} },       
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {   3} },             
    { {       340}, { 118} }, // _typespec
    { {        58}, { 119} }, // ':'      
    { {         0}, {   0} },             
};

SR__ s_96[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_104[] =
{
    { { REQ_DEF}, {   9} },                       
    { {     350}, { 120} }, // _productionList    
    { {     348}, { 121} }, // _production        
    { {     347}, { 122} }, // _productionElements
    { {     346}, { 123} }, // _productionElement 
    { {     282}, { 124} }, // QUOTE              
    { {     267}, { 125} }, // IDENTIFIER         
    { {     259}, { 126} }, // BLOCK              
    { {     280}, { 127} }, // PREC               
    { {       0}, { -99} },                       
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 128} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_106[] =
{
    { { DEF_RED}, {   3} },               
    { {     333}, { 129} }, // _symbols   
    { {     330}, { 115} }, // _symbol_exp
    { {       0}, { -37} },               
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   3} },               
    { {     333}, { 130} }, // _symbols   
    { {     330}, { 115} }, // _symbol_exp
    { {       0}, { -37} },               
};

SR__ s_110[] =
{
    { { DEF_RED}, {   3} },               
    { {     333}, { 131} }, // _symbols   
    { {     330}, { 115} }, // _symbol_exp
    { {       0}, { -37} },               
};

SR__ s_111[] =
{
    { { DEF_RED}, {   3} },               
    { {     333}, { 132} }, // _symbols   
    { {     330}, { 115} }, // _symbol_exp
    { {       0}, { -37} },               
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        62}, { 133} }, // '>'
    { {         0}, {   0} },       
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   6} },               
    { {       332}, { 134} }, // _symbolList
    { {       331}, { 135} }, // _symbol    
    { {       282}, { 136} }, // QUOTE      
    { {       301}, { 137} }, // identifier 
    { {       267}, {  96} }, // IDENTIFIER 
    { {         0}, {   0} },               
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       341}, { 138} }, // _polyspec 
    { {       301}, {  95} }, // identifier
    { {       267}, {  96} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       289}, { 139} }, // STRING
    { {         0}, {   0} },          
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   4} },                        
    { {        59}, { 140} }, // ';'                 
    { {       349}, { 141} }, // _productionSeparator
    { {       124}, { 142} }, // '|'                 
    { {         0}, {   0} },                        
};

SR__ s_121[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_122[] =
{
    { { REQ_DEF}, {   6} },                      
    { {     346}, { 143} }, // _productionElement
    { {     282}, { 124} }, // QUOTE             
    { {     267}, { 125} }, // IDENTIFIER        
    { {     259}, { 126} }, // BLOCK             
    { {     280}, { 127} }, // PREC              
    { {       0}, { -98} },                      
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR__ s_124[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_126[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       345}, { 144} }, // _precSpec 
    { {       267}, { 145} }, // IDENTIFIER
    { {       282}, { 146} }, // QUOTE     
    { {         0}, {   0} },              
};

SR__ s_128[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_131[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_134[] =
{
    { { REQ_DEF}, {  39} },                                 
    { {     305}, { 147} }, // optSemiCol                   
    { {     303}, { 148} }, // optComma                     
    { {      59}, { 108} }, // ';'                          
    { {      44}, { 149} }, // ','                          
    { { _error_}, { -10} }, // _error_                      
    { {     257}, { -10} }, // BASECLASS_HEADER             
    { {     258}, { -10} }, // BASECLASS_PREINCLUDE         
    { {     260}, { -10} }, // CLASS_HEADER                 
    { {     261}, { -10} }, // CLASS_NAME                   
    { {     262}, { -10} }, // DEBUGFLAG                    
    { {     263}, { -10} }, // ERROR_VERBOSE                
    { {     264}, { -10} }, // EXPECT                       
    { {     265}, { -10} }, // FILENAMES                    
    { {     266}, { -10} }, // FLEX                         
    { {     268}, { -10} }, // IMPLEMENTATION_HEADER        
    { {     269}, { -10} }, // LEFT                         
    { {     270}, { -10} }, // LOCATIONSTRUCT               
    { {     271}, { -10} }, // LSP_NEEDED                   
    { {     272}, { -10} }, // LTYPE                        
    { {     273}, { -10} }, // NAMESPACE                    
    { {     274}, { -10} }, // NEG_DOLLAR                   
    { {     275}, { -10} }, // NOLINES                      
    { {     276}, { -10} }, // NONASSOC                     
    { {     278}, { -10} }, // PARSEFUN_SOURCE              
    { {     279}, { -10} }, // POLYMORPHIC                  
    { {     281}, { -10} }, // PRINT_TOKENS                 
    { {     283}, { -10} }, // REQUIRED                     
    { {     284}, { -10} }, // RIGHT                        
    { {     285}, { -10} }, // SCANNER                      
    { {     286}, { -10} }, // SCANNER_MATCHED_TEXT_FUNCTION
    { {     287}, { -10} }, // SCANNER_TOKEN_FUNCTION       
    { {     288}, { -10} }, // START                        
    { {     290}, { -10} }, // STYPE                        
    { {     291}, { -10} }, // TARGET_DIRECTORY             
    { {     292}, { -10} }, // TOKEN                        
    { {     293}, { -10} }, // TWO_PERCENTS                 
    { {     294}, { -10} }, // TYPE                         
    { {     295}, { -10} }, // UNION                        
    { {       0}, {  -6} },                                 
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_137[] =
{
    { { REQ_DEF}, {   3} },             
    { {     304}, { 150} }, // optNumber
    { {     277}, { 151} }, // NUMBER   
    { {       0}, {  -8} },             
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_141[] =
{
    { { REQ_DEF}, {   8} },                       
    { {     348}, { 152} }, // _production        
    { {     347}, { 122} }, // _productionElements
    { {     346}, { 123} }, // _productionElement 
    { {     282}, { 124} }, // QUOTE              
    { {     267}, { 125} }, // IDENTIFIER         
    { {     259}, { 126} }, // BLOCK              
    { {     280}, { 127} }, // PREC               
    { {       0}, { -99} },                       
};

SR__ s_142[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_147[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       331}, { 153} }, // _symbol   
    { {       282}, { 136} }, // QUOTE     
    { {       301}, { 137} }, // identifier
    { {       267}, {  96} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_149[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_152[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_153[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,
};

typedef std::map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "_EOF_"),
    SMapVal(256, "_error_"),

    SMapVal(257, "BASECLASS_HEADER"),
    SMapVal(258, "BASECLASS_PREINCLUDE"),
    SMapVal(259, "BLOCK"),
    SMapVal(260, "CLASS_HEADER"),
    SMapVal(261, "CLASS_NAME"),
    SMapVal(262, "DEBUGFLAG"),
    SMapVal(263, "ERROR_VERBOSE"),
    SMapVal(264, "EXPECT"),
    SMapVal(265, "FILENAMES"),
    SMapVal(266, "FLEX"),
    SMapVal(267, "IDENTIFIER"),
    SMapVal(268, "IMPLEMENTATION_HEADER"),
    SMapVal(269, "LEFT"),
    SMapVal(270, "LOCATIONSTRUCT"),
    SMapVal(271, "LSP_NEEDED"),
    SMapVal(272, "LTYPE"),
    SMapVal(273, "NAMESPACE"),
    SMapVal(274, "NEG_DOLLAR"),
    SMapVal(275, "NOLINES"),
    SMapVal(276, "NONASSOC"),
    SMapVal(277, "NUMBER"),
    SMapVal(278, "PARSEFUN_SOURCE"),
    SMapVal(279, "POLYMORPHIC"),
    SMapVal(280, "PREC"),
    SMapVal(281, "PRINT_TOKENS"),
    SMapVal(282, "QUOTE"),
    SMapVal(283, "REQUIRED"),
    SMapVal(284, "RIGHT"),
    SMapVal(285, "SCANNER"),
    SMapVal(286, "SCANNER_MATCHED_TEXT_FUNCTION"),
    SMapVal(287, "SCANNER_TOKEN_FUNCTION"),
    SMapVal(288, "START"),
    SMapVal(289, "STRING"),
    SMapVal(290, "STYPE"),
    SMapVal(291, "TARGET_DIRECTORY"),
    SMapVal(292, "TOKEN"),
    SMapVal(293, "TWO_PERCENTS"),
    SMapVal(294, "TYPE"),
    SMapVal(295, "UNION"),
    SMapVal(296, "input"),
    SMapVal(297, "directives"),
    SMapVal(298, "_two_percents"),
    SMapVal(299, "rules"),
    SMapVal(300, "optTwo_percents"),
    SMapVal(301, "identifier"),
    SMapVal(302, "typename"),
    SMapVal(303, "optComma"),
    SMapVal(304, "optNumber"),
    SMapVal(305, "optSemiCol"),
    SMapVal(306, "_tokenname"),
    SMapVal(307, "optTypename"),
    SMapVal(308, "_baseclass_header"),
    SMapVal(309, "_baseclass_preinclude"),
    SMapVal(310, "_class_header"),
    SMapVal(311, "_class_name"),
    SMapVal(312, "_expect"),
    SMapVal(313, "_filenames"),
    SMapVal(314, "_implementation_header"),
    SMapVal(315, "_incrementPrecedence"),
    SMapVal(316, "_left"),
    SMapVal(317, "_typesymbol"),
    SMapVal(318, "_locationstruct"),
    SMapVal(319, "_ltype"),
    SMapVal(320, "_namespace"),
    SMapVal(321, "_nonassoc"),
    SMapVal(322, "_parsefun_source"),
    SMapVal(323, "_pushPrecedence"),
    SMapVal(324, "_required"),
    SMapVal(325, "_right"),
    SMapVal(326, "_scanner"),
    SMapVal(327, "_scanner_token_function"),
    SMapVal(328, "_scanner_matched_text_function"),
    SMapVal(329, "_start"),
    SMapVal(330, "_symbol_exp"),
    SMapVal(331, "_symbol"),
    SMapVal(332, "_symbolList"),
    SMapVal(333, "_symbols"),
    SMapVal(334, "_target_directory"),
    SMapVal(335, "_type"),
    SMapVal(336, "_stype"),
    SMapVal(337, "_token"),
    SMapVal(338, "_union"),
    SMapVal(339, "_polymorphic"),
    SMapVal(340, "_typespec"),
    SMapVal(341, "_polyspec"),
    SMapVal(342, "_polyspecs"),
    SMapVal(343, "_directiveSpec"),
    SMapVal(344, "_directive"),
    SMapVal(345, "_precSpec"),
    SMapVal(346, "_productionElement"),
    SMapVal(347, "_productionElements"),
    SMapVal(348, "_production"),
    SMapVal(349, "_productionSeparator"),
    SMapVal(350, "_productionList"),
    SMapVal(351, "_ruleName"),
    SMapVal(352, "_rule"),
    SMapVal(353, "input_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(true),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}

// $insert debugfunctions

std::ostringstream ParserBase::s_out__;

std::ostream &ParserBase::dflush__(std::ostream &out)
{
    std::ostringstream &s_out__ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out__.str() << std::flush;
    s_out__.clear();
    s_out__.str("");
    return out;
}

std::string ParserBase::stype__(char const *pre, STYPE__ const &semVal, char const *post) const
{
    return "";
}
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << "`" << it->second << "'";
    else if (isprint(value))
        ostr << "`" << static_cast<char>(value) << "' (" << value << ")";
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << "'";
    return ostr.str();
}


void Parser::print__()
{
// $insert print

    enum { _UNDETERMINED_ = -2 };

    std::cout << "Token: " << symbol__(d_token__) <<
                ", text: `";
        if (d_token__ == _UNDETERMINED_)
            std::cout << "'\n";
        else
            std::cout << d_scanner.matched() << "'\n";
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert debug
    if (d_debug__)
        s_out__ <<   "push(state " << state << stype__(", semantic TOS = ", d_val__, ")") << ')' << "\n" << dflush__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(" << count << ") from stack having size " << (d_stackIdx__ + 1) << "\n" << dflush__;
    if (d_stackIdx__ < static_cast<int>(count))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "Terminating parse(): unrecoverable input error at token " << symbol__(d_token__) << "\n" << dflush__;
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(): next state: " << d_state__ << ", token: " << symbol__(d_token__) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  stype__("semantic: ", d_val__) << "\n" << dflush__;
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    // $insert debug
    if (d_debug__)
        s_out__ <<  "executeAction(): of rule " << production ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic [TOS]: ", d_val__) << " ..." << "\n" << dflush__;
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 32 "grammar"
        {
         expectRules();
         }
        break;

        case 3:
#line 3 "inc/identifier"
        {
         d_val__ = new Semantic<Tag::STRING>(d_matched);
         }
        break;

        case 4:
#line 5 "inc/typename"
        {
         d_field = d_vsp__[-1]->as<Tag::STRING>(); 
         }
        break;

        case 7:
#line 9 "inc/opt"
        {
         d_val__ = new Semantic<Tag::BOOL>(true);
         }
        break;

        case 8:
#line 13 "inc/opt"
        {
         d_val__ = new Semantic<Tag::BOOL>(false);
         }
        break;

        case 11:
#line 25 "inc/opt"
        {
         d_expect = "token name";
         }
        break;

        case 13:
#line 35 "inc/opt"
        {
         d_field.clear();
         }
        break;

        case 14:
#line 42 "inc/opt"
        {
         wmsg << 
         "Ignoring all input beyond the second %% token" << endl;
         ACCEPT();
         }
        break;

        case 16:
#line 3 "inc/directives"
        {
         d_expect = "baseclass header name";
         }
        break;

        case 17:
#line 10 "inc/directives"
        {
         d_expect = "baseclass pre-include name";
         }
        break;

        case 18:
#line 17 "inc/directives"
        {
         d_expect = "class header name";
         }
        break;

        case 19:
#line 24 "inc/directives"
        {
         d_expect = "class name";
         }
        break;

        case 20:
#line 31 "inc/directives"
        {
         d_expect = "number (of conflicts)";
         }
        break;

        case 21:
#line 38 "inc/directives"
        {
         d_expect = "generic name of files";
         }
        break;

        case 22:
#line 45 "inc/directives"
        {
         d_expect = "implementation header name";
         }
        break;

        case 23:
#line 51 "inc/directives"
        {
         Terminal::incrementPrecedence();
         }
        break;

        case 24:
#line 59 "inc/directives"
        {
         d_association = Terminal::LEFT;
         }
        break;

        case 25:
#line 66 "inc/directives"
        {
         d_expect = "Location struct definition";
         }
        break;

        case 26:
#line 73 "inc/directives"
        {
         d_expect = "Location type specification";
         }
        break;

        case 27:
#line 80 "inc/directives"
        {
         d_expect = "Namespace identifier";
         }
        break;

        case 28:
#line 88 "inc/directives"
        {
         d_association = Terminal::NONASSOC;
         }
        break;

        case 29:
#line 95 "inc/directives"
        {
         d_expect = "File name for the parse() member";
         }
        break;

        case 30:
#line 101 "inc/directives"
        {
         d_val__ = new Semantic<Tag::SIZE_T>(Terminal::sPrecedence());
         Terminal::resetPrecedence();
         }
        break;

        case 31:
#line 109 "inc/directives"
        {
         d_expect = "Required number of tokens between errors";
         }
        break;

        case 32:
#line 117 "inc/directives"
        {
         d_association = Terminal::RIGHT;
         }
        break;

        case 33:
#line 124 "inc/directives"
        {
         d_expect = "Path to the scanner header filename";
         }
        break;

        case 34:
#line 131 "inc/directives"
        {
         d_expect = "Scanner function returning the next token";
         }
        break;

        case 35:
#line 138 "inc/directives"
        {
         d_expect = "Scanner function returning the matched text";
         }
        break;

        case 36:
#line 145 "inc/directives"
        {
         d_expect = "Start rule" ;
         }
        break;

        case 37:
#line 151 "inc/directives"
        {
         d_expect = "identifier or character-constant";
         }
        break;

        case 38:
#line 158 "inc/directives"
        {
         defineTerminal(d_scanner.canonicalQuote(), Symbol::CHAR_TERMINAL);
         }
        break;

        case 39:
#line 164 "inc/directives"
        { 
         defineTokenName(d_vsp__[-1]->as<Tag::STRING>(), d_vsp__[0]->as<Tag::BOOL>()); 
         }
        break;

        case 43:
#line 183 "inc/directives"
        {
         d_expect = "target directory";
         }
        break;

        case 44:
#line 190 "inc/directives"
        {
         d_expect = "type-name";
         d_typeDirective = true;
         }
        break;

        case 45:
#line 198 "inc/directives"
        {
         d_expect = "STYPE type name" ;
         }
        break;

        case 46:
#line 204 "inc/directives"
        {
         d_expect = "opt. <type> identifier(s) or char constant(s)";
         }
        break;

        case 47:
#line 212 "inc/directives"
        {
         d_association = Terminal::UNDEFINED;
         }
        break;

        case 48:
#line 219 "inc/directives"
        {
         d_expect = "Semantic value union definition";
         }
        break;

        case 49:
#line 226 "inc/directives"
        {
         setPolymorphicDecl();
         }
        break;

        case 50:
#line 233 "inc/directives"
        {
         d_scanner.beginTypeSpec();
         }
        break;

        case 51:
#line 240 "inc/directives"
        {
         addPolymorphic(d_vsp__[-2]->as<Tag::STRING>());
         }
        break;

        case 54:
#line 255 "inc/directives"
        {
         d_options.setBaseClassHeader(); 
         }
        break;

        case 55:
#line 261 "inc/directives"
        {
         d_options.setPreInclude();
         }
        break;

        case 56:
#line 267 "inc/directives"
        {
         d_options.setClassHeader();
         }
        break;

        case 57:
#line 273 "inc/directives"
        {
         d_options.setClassName();
         }
        break;

        case 58:
#line 278 "inc/directives"
        {
         d_options.setDebug();
         }
        break;

        case 59:
#line 283 "inc/directives"
        {
         d_options.setErrorVerbose();
         }
        break;

        case 60:
#line 289 "inc/directives"
        {
         setExpectedConflicts();
         }
        break;

        case 61:
#line 295 "inc/directives"
        {
         d_options.setGenericFilename();
         }
        break;

        case 62:
#line 300 "inc/directives"
        {
         d_options.setFlex();
         }
        break;

        case 63:
#line 306 "inc/directives"
        {
         d_options.setImplementationHeader();
         }
        break;

        case 65:
#line 318 "inc/directives"
        {
         d_options.setLocationDecl(d_scanner.block().str());
         }
        break;

        case 66:
#line 323 "inc/directives"
        {
         d_options.setLspNeeded();
         }
        break;

        case 67:
#line 329 "inc/directives"
        {
         d_options.setLtype();
         }
        break;

        case 68:
#line 335 "inc/directives"
        {
         d_options.setNamespace();
         }
        break;

        case 69:
#line 340 "inc/directives"
        {
         setNegativeDollarIndices();
         }
        break;

        case 70:
#line 345 "inc/directives"
        {
         d_options.unsetLines();
         }
        break;

        case 72:
#line 356 "inc/directives"
        {
         d_options.setParsefunSource();
         }
        break;

        case 73:
#line 361 "inc/directives"
        {
         d_options.setPrintTokens();
         }
        break;

        case 74:
#line 367 "inc/directives"
        {
         d_options.setRequiredTokens(d_scanner.number());
         }
        break;

        case 76:
#line 378 "inc/directives"
        {
         d_options.setScannerInclude();
         }
        break;

        case 77:
#line 384 "inc/directives"
        {
         d_options.setScannerTokenFunction();
         }
        break;

        case 78:
#line 390 "inc/directives"
        {
         d_options.setScannerMatchedTextFunction();
         }
        break;

        case 79:
#line 396 "inc/directives"
        {
         setStart();
         }
        break;

        case 80:
#line 402 "inc/directives"
        {
         d_options.setStype();
         }
        break;

        case 81:
#line 408 "inc/directives"
        {
         d_options.setTargetDirectory();
         }
        break;

        case 82:
#line 416 "inc/directives"
        {
         Terminal::set_sPrecedence(d_vsp__[-1]->as<Tag::SIZE_T>());
         }
        break;

        case 84:
#line 427 "inc/directives"
        {
         setUnionDecl();
         }
        break;

        case 87:
#line 440 "inc/directives"
        {
         d_expect.erase();
         d_typeDirective = false;
         }
        break;

        case 90:
#line 3 "inc/rules"
        {
         d_val__ = new Semantic<Tag::SIZE_T>(IDENTIFIER);
         }
        break;

        case 91:
#line 8 "inc/rules"
        {
         d_val__ = new Semantic<Tag::SIZE_T>(QUOTE);
         }
        break;

        case 92:
#line 15 "inc/rules"
        {
         d_val__ = new Semantic<Tag::TERMINAL>(useTerminal());
         }
        break;

        case 93:
#line 20 "inc/rules"
        {
         d_val__ = new Semantic<Tag::SYMBOL>(useSymbol());
         }
        break;

        case 94:
#line 25 "inc/rules"
        {
         d_val__ = new Semantic<Tag::BLOCK>(d_scanner.block());
         }
        break;

        case 95:
#line 31 "inc/rules"
        {
         setPrecedence(d_vsp__[0]->as<Tag::SIZE_T>());
         d_val__ = spSemBase(); 
         
         }
        break;

        case 96:
#line 40 "inc/rules"
        {
         d_val__ = handleProductionElements(d_vsp__[-1], d_vsp__[0]);
         
         
         }
        break;

        case 98:
#line 51 "inc/rules"
        {
         handleProductionElement(d_vsp__[0]);
         
         
         }
        break;

        case 99:
#line 57 "inc/rules"
        {
         
         
         checkEmptyBlocktype();
         }
        break;

        case 100:
#line 67 "inc/rules"
        {
         d_rules.addProduction();
         }
        break;

        case 103:
#line 82 "inc/rules"
        {
         openRule(d_vsp__[-1]->as<Tag::STRING>());
         }
        break;

    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "... action of rule " << production << " completed" ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic: ", d_val__) << "\n" << dflush__;
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

    // $insert debug
    if (d_debug__)
        s_out__ <<  "reduce(): by rule " << (&pi - s_productionInfo) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  " to N-terminal " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
        // $insert debug
        if (d_debug__)
            s_out__ <<  "nextToken(): popped " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
    // $insert debug
    if (d_debug__)
        s_out__ <<  "nextToken(): using " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "): default reduction by rule " << -elementPtr->d_action << "\n" << dflush__;
            return elementPtr->d_action;                
        }
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) << "): Not " ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "found. " << (recovery ? "Continue" : "Start") << " error recovery."  << "\n" << dflush__;

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;

// $insert debuglookup
    if (d_debug__)
    {
        s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__);

        if (action < 0)             // a reduction is found
            s_out__ << "): reduce by rule " << -action;
        else if (action == 0)
            s_out__ <<  "): ACCEPT";
        else 
            s_out__ <<  "): shift " << action << " (" << symbol__(d_token__) << 
                        " processed)";

        s_out__ << "\n" << dflush__;
    }

    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }

    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): " << d_nErrors__ << " error(s) so far. State = " << top__() << "\n" << dflush__;

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "errorRecovery(): pop state " << top__() << "\n" << dflush__;
        pop__();
    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): state " << top__() << " is an ERROR state" << "\n" << dflush__;

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() SHIFT state " << action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", continue with " << symbol__(d_token__) << "\n" << dflush__;

                if (gotToken)
                {
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  "errorRecovery() COMPLETED: next state " ;
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  action << ", no token yet" << "\n" << dflush__;

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() REDUCE by rule " << -action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", token = " << symbol__(d_token__) << "\n" << dflush__;
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): Parsing starts" << "\n" << dflush__;
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "==" << "\n" << dflush__;
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): returns " << retValue << "\n" << dflush__;
    return retValue;
}

