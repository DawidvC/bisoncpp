#!/bin/sh

COMMAND=/bin/sh
COMMAND="/usr/bin/tcsh -f"

SKEL=../../../share/bisonc++
BISONCPP="../../../tmp/bin/bisonc++ -B ${SKEL}base.h -C ${SKEL}.h -I ${SKEL}.ih -P ${SKEL}.cc"

example()
{
    let EXAMPLE=$EXAMPLE+1
    case $2 in
        ("")
            CONS=
            DEB=
        ;;
        (c)
            CONS=--construction
            DEB=
        ;;
        (d)
            CONS=
            DEB=--debug
        ;;
        (cd|dc)
            CONS=--construction
            DEB=--debug
        ;;
        (*)
            return 0
        ;;
    esac
        
    cd $1
    echo --------------------------------
    cat doc
    echo
    
    bison -v grammar
    $BISONCPP -V $CONS $DEB grammar > bisonc++.construction

    echo "Entering a shell to inspect the results, use \`exit' to continue"
    $COMMAND
            
    find ./ -type f -not -regex '.*/CVS/.*' -not -name grammar \
                    -not -name doc \
                    -exec rm '{}' ';'

    echo --------------------------------
    cd ..
}


echo "
    This script feeds several grammars to both bison and bisonc++
With each grammar a summary of its results are shown, and you can select
whether or not to run the example. Each example is available in a separate
subdirectory, so you could also run one particular example. 

    From the various test directories, bisonc++ should be accessible as

$BISONCPP

    If that's not true for you, consider changing the BISONCPP variable in
this script.

    With each example, hitting a plain Enter runs the program, entering c runs
the example using bisonc++'s --construction option, and d uses
--debug. Combinations are ok too.

    Note that bison always defines one additional state compared with
bisonc++. Bison accepts its input in a separate state, whereas bisonc++
accepts when <EOF> is seen in combination with the reduction of the
the augmented grammar rule G* -> G . Bisonc++ will not execute an action here,
but that should be ok, since the grammar specification does not make G* -> G
visible, so no action can be associated with its reduction anyway.

"

EXAMPLE=1
PRE="Press Enter c, d  combi to run, else example $EXAMPLE"

# echo $PRE: AHO Example 4.42, p. 231
# read RUN
# example aho4.42 $RUN
# 
# echo #PRE: a plain R/R conflict
# read RUN
# example rr1 $RUN
#
# echo $PRE: a grammar having 2 R/R conflicts
# read RUN
# example rr2 $RUN
# 
# echo $PRE: the dangling-else conflict
# read RUN
# example danglingelse $RUN
# 
# echo $PRE: a grammar not deriving a sentence
# read RUN
# example nosentence $RUN

echo $PRE: a grammar having an error-production
read RUN
example error $RUN






    
