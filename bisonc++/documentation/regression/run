#!/bin/sh

    # Modifiy the COMMAND variable to your taste, if your shell isn't
    # mentioned.  By specifying your COMMAND-shell last it will be used;
COMMAND="/usr/bin/tcsh -f"
COMMAND=/bin/sh

    # Assuming bisonc++ is in your computer's search-path. If not, define
    # BISONCPP as the full path to bisconc++:
BISONCPP=bisonc++

    # UNCOMMENT the following variables if you want to run the examples from
    # the source distribution's documentation/regression directory rather than
    # from bisonc++ documentation's `regression' subdirectory.
# SKEL=../../../../share/bisonc++
# BISONCPP="../../../../tmp/bin/bisonc++ -B ${SKEL}base.h -C ${SKEL}.h -I ${SKEL}.ih -P ${SKEL}.cc"

example()
{
    let EXAMPLE=${EXAMPLE}+1

    orgdir=`pwd`

    case $2 in
        ("")
            CONS=
            DEB=
        ;;
        (c)
            CONS=--construction
            DEB=
        ;;
        (d)
            CONS=
            DEB=--debug
        ;;
        (cd|dc)
            CONS=--construction
            DEB=--debug
        ;;
        (*)
            return 0
        ;;
    esac

    cd $1
    cwd=`pwd`

    echo --------------------------------
    echo
    cat doc
    echo
    echo --------------------------------
    
    cd parser
    $BISONCPP -V $CONS $DEB grammar > bisonc++.construction

    if [ -s ../demo.cc ] 
    then
        cd ../scanner
        flex -I lexer
        cd ..
        g++ -Wall -o demo *.cc */*.cc
        echo "Entering a shell: \`demo' runs the program, \`exit' returns"
        echo "Bisonc++'s output is in the \`parser' subdirectory"
        $COMMAND
    else        
        bison -v grammar
        echo "Entering a shell: inspect the results, use \`exit' to continue"
        $COMMAND
    fi

    cd $cwd

        # the doc-test is a safequard agains accidentally removing files
    [ -s doc ] && find ./ -type f -not -regex '.*/CVS/.*' \
                -not -regex '.*/_.*' \
                -not -name doc -not -name demo.cc \
                -not -name grammar -not -name parser.h -not -name parser.ih \
                -not -name lexer -not -name scanner.h -not -name scanner.ih \
                -exec rm '{}' ';'

    cd $orgdir
}


echo "
    This script feeds several grammars to bisonc++. Some grammars allow you to
execute a little demo-program. Some examples do not have demo programs. The
grammars without accompanying demo-program are also fed to bison (the grammars
used for demo-programs use bisonc++ specific directives, so they're not
offered to bison to chew upon.

    From the various test/parser directories, bisonc++ should be accessible as

$BISONCPP

    If that's not true for you, consider changing the BISONCPP variable in
this script.

    With each example, hitting a plain Enter creates the parser and optionally
builds the demo-program

    Note that bison always defines one additional state compared with
bisonc++. Bison accepts its input in a separate state, whereas bisonc++
accepts when <EOF> is seen in combination with the reduction of the
the augmented grammar rule G* -> G . Bisonc++ will not execute an action here,
but that should be ok, since the grammar specification does not make G* -> G
visible, so no action can be associated with its reduction anyway.

"

EXAMPLE=1
PRE="To run: [cd] + Enter, else skip example"

echo $PRE $EXAMPLE: AHO Example 4.42, p. 231
read RUN
example aho4.42 $RUN

echo $PRE $EXAMPLE: two R/R conflicts
read RUN
example rr2 $RUN

echo $PRE $EXAMPLE: the dangling-else conflict
read RUN
example danglingelse $RUN

echo $PRE $EXAMPLE: S/R and R/R conflicts
read RUN
example conflicts $RUN

echo $PRE $EXAMPLE: not derivable sentence
read RUN
example nosentence $RUN

echo $PRE $EXAMPLE: using an error-production
read RUN
example error $RUN

echo $PRE $EXAMPLE: adding two integral values
read RUN
example simplecalc $RUN

echo $PRE $EXAMPLE: using the location stack
read RUN
example location $RUN

echo $PRE $EXAMPLE: the man-page calculator
read RUN
example calculator $RUN

echo $PRE $EXAMPLE: a calculator from the C++ Annotations
read RUN
example annotations $RUN

echo "
    END OF SCRIPT
"
