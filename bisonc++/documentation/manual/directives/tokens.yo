The basic way to declare a token type name (terminal symbol) is as follows:
        verb(
    %token name
        ) 
        B() will convert this into a tt(Parser::Tokens) enumeration value
(where `tt(Parser)' is the name of the generated parser class, see section
ref(PARSERCLASS)). This allows the lexical scanner member function tt(lex())
to return these token values by name directly, and it allows externally
defined lexical scanners (called by tt(lex())) to return token values as
tt(Parser::name). Note that when an externally defined lexical scanner is
used, it should include tt(Parserbase.h), the parser's base class header file,
in order to be able to use the tt(Parser::Tokens) enumeration type.

Alternatively, you can use tt(%left), tt(%right), or tt(%nonassoc) instead of
tt(%token), if you wish to specify precedence. See section ref(PRECEDENCE).

It is possible to specify explicitly the numeric code for a token type by
appending an integer value in the field immediately following the token name:
        verb(
    %token NUM 300
        )
    However, this practice is strongly discouraged. It is generally best to
let B() choose the numeric codes for all token types. B() will
automatically select codes that don't conflict with each other or with ASCII
characters.

In the event that the semantic stack type contain tt(union) elements, the
tt(%token) or other token declaration may be augmented with the data type
alternative delimited by angle-brackets (see section ref(MORETYPES)).  For
example:
        verb(
    %union              // define semantic stack elements
    {              
      double u_val;
      symrec *u_tptr;
    };

    %token <val> NUM    // define token NUM and its type
        )
