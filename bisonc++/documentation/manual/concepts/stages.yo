The actual language-design process using B(), from grammar specification
to a working compiler or interpreter, has these parts:
    itemization(
    it() Formally specify the grammar in a form recognized by B() (see
chapter ref(GRAMMARFILES)).
    For each grammatical rule in the language, describe the action that is to
be taken when an instance of that rule is recognized. The action is described
by a sequence of bf(C++) statements.
    it() Run B() on the grammar to produce the parser class and parsing
member function.
    it() Write a lexical scanner to process input and pass tokens to the
parser. The lexical scanner may be written by hand in bf(C++) (see section
ref(LEX)) (it could also be produced using, e.g., bf(flex)(1), but the use of
bf(flex)(1) is not discussed in this manual).
    it() All the parser's members (except for the member bf(parse())) and its
support functions must be implemented by the programmer. Of course, additional
member functions should also be declared in the parser class' header.  At the
very least the member bf(int lex()) calling the lexecal scanner to produce the
next available token em(must) be implemented (although a standardized
implementation can also be generated by B()). The member bf(lex()) is
called by bf(parse()) (support functions) to obtain the next available
token. The member function bf(void error(char const *msg)) may also be
re-implemented by the programmer, but a basic in-line implementation is
provided by default. The member function bf(error()) is called when
bf(parse()) detects (syntactical) errors.
    it() The parser can now be used in a program. A very simple example would
be: 
        verb(
    int main()
    {
        Parser parser;
        return parser.parse();
    }
        )
    )
    Once the software has been implemented, the following steps are required
to create the final program:
    itemization(
    it() Compile the parsing function generated by B(), as well as any
other source files you have implemented.
    it() Link the object files to produce the final program.
    )
