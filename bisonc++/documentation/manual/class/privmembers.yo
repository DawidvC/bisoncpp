    The following members can be used by members of parser classes generated
by bic(). When prefixed by tt(Base::) they are actually protected members
inherited from the parser's base class.  Members for which the phrase ``Used
internally'' is used should not be called by user-defined code.
    itemization(
    it() bf(Base::ParserBase()):nl()
        The default base-class constructor. Used internally.
    it() bf(void Base::ABORT() const throw(Return__)):nl()
       This member can be called from any member function (called from any of
        the parser's action blocks) to indicate a failure while parsing thus
        terminating the parsing function with an error value 1. Note that this
        offers a marked extension and improvement of the macro tt(YYABORT)
        defined by bf(bison++) in that tt(YYABORT) could not be called from
        outside of the parsing member function.
    it() bf(void Base::ACCEPT() const throw(Return__)):nl()
       This member can be called from any member function (called from any of
        the parser's action blocks) to indicate successful parsing and thus
        terminating the parsing function. Note that this offers a marked
        extension and improvement of the macro tt(YYACCEPT) defined by
        bf(bison++) in that tt(YYACCEPT) could not be called from outside of
        the parsing member function.
    it() bf(void Base::clearin+nop()()):nl()
       This member replaces bf(bison)(++)'s macro tt(yyclearin) and causes
        bf(bisonc++) to request another token from its tt(lex+nop()()) member,
        even if the current token has not yet been processed. It is a useful
        member when the parser should be reset to its initial state, e.g.,
        between successive calls of tt(parse). In this situation the scanner
        will probably be reloaded with new information too (in the context of
        a tt(flex)-generated scanner by, e.g., calling the scanner's
        tt(yyrestart) member.
    it() bf(bool Base::debug() const):nl()
       This member returns the current value of the debug variable.
    it() bf(void Base::ERROR+nop()() const throw(ErrorRecovery__)):nl()
       This member can be called from any member function (called from any of
        the parser's action blocks) to generate an error, and thus initiate
        the parser's error recovery code. Note that this offers a marked
        extension and improvement of the macro tt(YYERROR) defined by
        bf(bison++) in that tt(YYERROR) could not be called from outside of
        the parsing member function.
    it() bf(void error(char const *msg)):nl()
       This member may be redefined in the parser class. Its default (inline)
        implementation is to write a simple message to the standard error
        stream. It is called when a syntactic error is encountered.
    it() bf(void errorRecovery__+nop()()):nl()
       Used internally.
    it() bf(void Base::errorVerbose__+nop()()):nl()
       Used internally.
    it() bf(void executeAction+nop()()):nl()
       Used internally.
    it() bf(int lex()):nl()
       This member may be pre-implemented using the tt(scanner) option or
        directive (see above) or it em(must) be implemented by the
        programmer. It interfaces to the lexical scanner, and should
        return the next token produced by the lexical scanner, either as a
        plain character or as one of the symbolic tokens defined in the
        tt(Parser::Tokens__) enumeration. Zero or negative token values are
        interpreted as `end of input'.
    it() bf(int lookup+nop()()):nl()
       Used internally.
    it() bf(void nextToken+nop()()):nl()
       Used internally.
    it() bf(void Base::pop__+nop()()):nl()
       Used internally.
    it() bf(void Base::popToken__+nop()()):nl()
       Used internally.
    it() bf(void print__()()):nl()
       Used internally.
    it() bf(void print())):nl()
      This member calls tt(print__) to display the last received token and
       corrseponding matched text. The tt(print__) member is only implemented
       if the tt(--print-tokens) option or tt(%print-tokens) directive was
       used when the parsing function was generated. Calling tt(print__) from
       tt(print) is unconditional, but can easily be controlled by the using
       program, by defining, e.g., a command-line option.
    it() bf(void Base::push__+nop()()):nl()
       Used internally.
    it() bf(void Base::pushToken__+nop()()):nl()
       Used internally.
    it() bf(void Base::reduce__+nop()()):nl()
       Used internally.
    it() bf(void Base::symbol__+nop()()):nl()
       Used internally.
    it() bf(void Base::top__+nop()()):nl()
       Used internally.
    )
