Below the way Bisonc++ may use a polymorphic semantic value is discussed. The
approach discussed below is a direct result of an suggestion initially made by
Dallas A. Clement in September 2007. All sources of the example discussed
below are found in the lurl(poly) directory.

One may wonder why a tt(union) is still used by Bisonc++ as bf(C++) offers
inherently superior approaches to combine multiple types in one type. The
bf(C++) way to so so is by defining a polymorphic base class and a series of
derived classes implementing the various exclusive data types. The tt(union)
approach is supported by Bisonc++ since it is supported by bf(bison)(1) and
bf(bison++); dropping the tt(union) would impede backward portability.

The alternative to using a tt(union) is using a polymorphic base class. This
class will be developed below as the class tt(Base). Since it's a polymorphic
base class it should have the following characteristics:
    itemization(
    it() Its destructor must be virtual;
    it() Objects of the derived classes may be obtained using a
        pure virtual tt(clone()) member to implement as so-called em(virtual
        constructor);
    it() Several convenient utility members may be  provided: a pure virtual
        tt(insert()) member and an overloaded tt(operator<<()) were defined to
        allow derived objects to be inserted into tt(ostream) objects.
    )

The class bf(Base) has the following interface:
    verbinclude(grammar/poly/base/base.h)

The alternatives defined by a classical tt(union) are defined by classes
derived from the class tt(Base). For example:
    itemization(
    it() Objects of the class tt(Int) contain tt(int) value values. Here is
its interface (and implementation):
    verbinclude(grammar/poly/int/int.h)

    it() Objects of the class tt(Text) contain text. These objects can be
used, e.g., to store the names of identifiers recognized by a lexical scanner.
Here is the interface of the class tt(Text):
    verbinclude(grammar/poly/text/text.h)
    )

Realize that tt(Base) can't be the parser's semantic value:
    itemization(
    it() a tt(Base) class object cannot contain derived class's data members. 
    it() it's not possible to define a tt(Base) reference as a semantic value,
        as vectors and other containers cannot store references.
    it() the semantic value should not be a pointer to a tt(Base)
        class. Although a pointer would offer programmers the benefits of the
        polymorphic nature of the tt(Base) class, it would also require them
        to keep track of memory used by tt(Base) objects, which would counter
        many of the benefits of using a polymorphic base class.
    )

Consequently, a wrapper class tt(Semantic) around a tt(Base) pointer is
used. The wrapper class will take care of the proper destruction of objects
accessed through a tt(Base) pointer and will offer facilities to obtain the
proper derived class. The interface of the class tt(Semantic) is:
    verbinclude(grammar/poly/semantic/semantic.h)


tt(Semantic) is a slightly more `complete' class than tt(Base) and its
derivatives, since it contains a pointer which must be handled
appropriately. So it needs a copy constructor, overloaded assignment operator
and destructor. Apart from that, it supports members to obtain a reference to
the base class which is used by the overloaded tt(operator<<()) to allow
insertion of objects of classes derived from tt(Base) into streams. It also
offers a small member template function returning a reference to a derived
class object from the semantic value's tt(Base) class pointer. This member
effectively implements (and improves) the type safety that is otherwise
strived for by typed nonterminals and typed tokens. 

