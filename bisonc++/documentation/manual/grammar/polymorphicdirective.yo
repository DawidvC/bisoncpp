    The tt(%polymorphic) directive causes bic() to generate a parser using
polymorphic semantic values. Each semantic value is specified using a
em(tag), which is a bf(C++) identifier, and a bf(C++) type definition. 

Tags and type definitions are separated from each other by a colon, and each
semantic value specification ends at a semicolon.

A grammar specification file can contain only one tt(%polymorphic) directive,
and the tt(%polymorphic, %stype) and tt(%union) directives are mutually
exclusive. However, the tt(%polymorphic) directive may specify multiple
semantic values.

Here is an example, defining three semantic values types: an tt(int), a
tt(std::string) and a tt(std::vector<double>):
        verb(
    %polymorphic INT: int; STRING: std::string; 
                 VECT: std::vector<double>;
        )
    The identifier to the left of the colon is called the em(type-identifier),
and the type definition to the right of the colon is called the
em(type-definition). The types specified at the tt(%polymorphic)
type-definitions must be built-in types or class-type declarations. The class
types must offer default constructors.

    If type declarations refer to types declared in header files that were
not already included by the parser's base class header, then these header
file(s) must be inserted using the tt(%baseclass-preinclude) directive.







