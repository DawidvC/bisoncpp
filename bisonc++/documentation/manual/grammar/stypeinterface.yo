    itemization(
    it() Constructors: 

        Default, copy and move constructors.  The default constructor does not
        contain usable data, but occasionally acts as a stub, accepting values
        of defined polymorphic types, which may then be retrieved from the
        tt(SType) object.

    it() Operators:

        Assignment operators: 

        The standard overloaded assignment operators (copy and move assignment
        operators) are available.

        In addition the member templates tt(SType &operator=(Type const
        &value)) and tt(SType &operator=(Type &&tmp)) can be used for all
        polymorphic value types. tt(Type) must (if no cast is used) exactly
        match one of the defined polymorphic types, because tt(Type) is used
        to determine the tt(Meta__::Tag__) value to use. Casting can of course
        be used when formulating tt(value's) expression.

        When tt(operator=(Type const &value)) is used, the left-hand side
        tt(SType) object receives a copy of tt(value); when tt(operator=(Type
        &&tmp)) is used, tt(tmp) is move-assigned to the left-hand side 
        tt(SType) object;

    it() tt(void assign<tag>(Args &&...args)) 

        The tt(tag) template argument must be a tt(Tag__) value. This member
        function constructs a semantic value of the type matching tt(tag) from
        the arguments that are passed to this member (zero arguments are OK if
        the type associated with tt(tag) supports default construction). The
        constructed value is then stored in the tt(STYPE__) object for which
        tt(assign) has been called.

        As a tt(Meta__::Tag__) value must be specified when using tt(assign)
        the compiler can use the explicit tag to convert tt(assign's) arguments
        to an tt(SType) object of the type matching the specified tag.

        The member tt(assign) can be used to store a specific polymorphic
        semantic value in an tt(STYPE__) object. It differs from the set of
        tt(operator=(Type)) members in that tt(assign) accepts multiple
        arguments to construct the requested tt(SType) value, whereas the
        tt(operator=) members only accepts single arguments of defined
        polymorphic types.
    
        To initialize an tt(STYPE__) object with a default tt(STYPE__) value,
        direct assignment can be used (e.g., tt(d_lval__ = STYPE__{})).

    it() tt(DataType &get<tag>(), DataType const &get<tag>() const)

        These members return references to the object's semantic values. The
        tt(tag) must be a defined tt(Tag__) value: it must be specified to
        allow the compiler to determine the semantic value's data type to use.
 
        When the option/directive tt(tag-mismatches on) was specified then
        tt(get), when called from the generated tt(parse) function, performs a
        run-time check to confirm that the specified tag corresponds to
        object's actual tt(Tag__) value. If a mismatch is observed, then the
        parsing function aborts with a fatal error message. When using
        shorthand notations (like tt($$) and tt($1)) in production
        rules' action blocks  bic() can determine the correct tt(tag),
        thus preventing the run-time check from failing.

        If, however, a fatal error was issued, and the option/directive
        tt(debug) was specified when bic() created the tt(parse) parsing
        function, the program can be rerun, specifying
        tt(parser.setDebug(Parser::ACTIONCASES)) before calling the parser's
        tt(parse) function. This will show (to the standard output stream) the
        case-entry numbers of the tt(switch) which is defined in the parser's
        tt(executeAction) member. The action case number that's reported just
        before the program reports the fatal error tells you in which of the
        grammar's action block the error was encountered.

    it(Tag__ tag() const)

       The tag matching the semantic value's polymorphic type is returned. The
        returned value is a valid tt(Tag__) value when the tt(SType) object's
        tt(valid) member returns tt(true);

       By default, or after assigning a plain (default) tt(STYPE__) object to
        an tt(STYPE__) object (e.g., using a statement like tt($$ =
        STYPE__{}), then tt(valid) returns tt(false) (e.g., tt(_$$.valid() ==
        false)), and the tt(tag) member returns tt(Meta__::sizeofTag) (.e.g,
        tt(static_cast<int>(_$$.tag()) == Meta__::sizeofTag)).

    it() tt(bool valid() const) 

        The value tt(true) is returned if the object contains a semantic value
        value. Otherwise tt(false) is returned. Note that default tt(STYPE__)
        values can be assigned to tt(STYPE__) objects, but these default
        values do not represent semantic values. See also the previous
        description of the tt(tag) member.
   )
