The parser's tt(%stype) is of course tt(Semantic). For this illustrative
example the parser's grammar is a simple one expecting input according to the
following two rules:
        verb(
    rule:
        IDENTIFIER '(' IDENTIFIER ')' ';'
    |
        IDENTIFIER '=' INT ';'
    ;
        )

The rule's actions simply echo the received identifiers and tt(int) values to
tt(cout). Here is an example of an action block:
        verb(
    IDENTIFIER '=' INT ';'
    {
          cout << $1 << " " << $3 << endl;
    }
        )

Alternative actions could easily be defined, e.g., using the tt(downcast())
member:
        verb(
    IDENTIFIER '=' INT ';'
    {
        int value = $3.downcast<Int>().value();
    }
        )

So, in these cases Bisonc++'s parser stores em(all) semantic values on the
semantic values stack, even though multiple tokens were returned in a
particular rule. At any time em(all) semantic values associated with
previously recognized tokens are available in the action block. Once the
semantic value stack is reduced, the tt(Semantic) class takes care of the
proper destruction of the objects pointed to by the tt(Semantic d_bp) data
member. 

The scanner must of course be able to access the parser's data member
representing the most recent demantic value. This data member is tt(d_lval__),
which can be offered to the scanner object when it's constructed. E.g., with a
scanner expecting an tt(STYPE__ *) the parser's constructor could simply be
defined as:
        verb(
    inline Parser::Parser()
    :
        d_scanner(&d_val__)
    {}
        )


