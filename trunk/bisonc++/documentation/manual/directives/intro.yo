The b() declarations section of a b() grammar defines the symbols
used in formulating the grammar and the data types of semantic values. See
section ref(SYMBOLS).

All token type names (but not single-character literal tokens such as '+' and
'*') must be declared. If you need to specify which data type to use for the
semantic value (see section ref(MORETYPES)) of nonterminal symbols, these
symbols must be declared as well.

The first rule in the file by default specifies the em(start symbol). If you
want some other symbol to be the start symbol, you must use an explicit
tt(%start) directive (see section ref(LANGUAGES)).

In this section all b() declarations will be discussed. Some of the
declarations have already been mentioned, but several more are available. Some
declarations define how the grammar will parse its input (like tt(%left,
%right)); other declarations are available, defining, e.g., the name of the
parsing function (by default tt(parse())), or the name(s) of the 
files generated by b().

In particular readers familiar with Bison (or Bison++) should read this
section thoroughly, since b()'s directives are more extensive and
different from the `declarations' offered by Bison, and the macros offered by
Bison++. 

Several directives expect filename arguments. Filenames must be specified on
the same line as the directive itself, and they start at the first non-blank
character following the directive. Filenames may contain escape sequences
(e.g., if you must: use `tt(\ )' to include a blank in a filename) and
continue until the first blank character thereafter. Alternatively, filenames
may be surrounded by double quotes (tt("...")) or pointed brackets
(tt(<...>)). Pointed brackets surrounding filenames merely function to delimit
filenames. They do not refer to, e.g., bf(C++)'s include path. No escape
sequences are required for blanks within delimited filenames.

Sometimes directives are parallelled by analogous options. In those cases
options take priority over directives.




